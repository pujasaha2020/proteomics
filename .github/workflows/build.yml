name: Lint, Format & Test

on: [push, pull_request]

permissions:
    contents: write
    checks: write
    pull-requests: write

jobs:
    Quality:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install black pylint isort
                  python -m pip install types-PyYAML

            - name: Set PYTHONPATH
              run: echo "PYTHONPATH=${GITHUB_WORKSPACE}" >> $GITHUB_ENV

            - name: Run Black
              run: black --check -v $(git ls-files '*.py')

            - name: Run Pylint
              run: pylint $(git ls-files '*.py')

            - name: Run Isort
              run: isort --check-only $(git ls-files '*.py')

    Test:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest pytest-cov

            - name: Set PYTHONPATH
              run: echo "PYTHONPATH=${GITHUB_WORKSPACE}" >> $GITHUB_ENV

            - name: Create .coveragerc
              run: |
                  echo "[run]" > .coveragerc
                  echo "omit = tests/*" >> .coveragerc

            - name: Run tests and coverage
              run: |
                  pytest --cov=$(pwd) --cov-config=.coveragerc tests/

            - name: Upload coverage data
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-data
                  path: .coverage
                  if-no-files-found: ignore

    Coverage:
        name: Coverage
        needs: Test
        runs-on: ubuntu-latest
        steps:
            - name: Check out the repo
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: 3.12

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade coverage[toml]

            - name: Download coverage data
              uses: actions/download-artifact@v4
              with:
                  name: coverage-data

            - name: Combine coverage
              run: |
                  coverage html --skip-covered --skip-empty
                  coverage_report=$(coverage report)
                  echo "$coverage_report" | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
                  total_coverage=$(echo "$coverage_report" | grep 'TOTAL' | awk '{print $4}' | sed 's/%//')
                  echo "TOTAL=${total_coverage}" >> $GITHUB_ENV

            - name: Extract badge name
              if: github.event_name == 'push'
              run: |
                  branch_name="${GITHUB_REF#refs/heads/}"
                  sanitized_branch_name="${branch_name//\//_}"
                  repo_name="${GITHUB_REPOSITORY#*/}"
                  echo "BADGE_NAME=${repo_name}_${sanitized_branch_name}" >> $GITHUB_ENV

            - name: Create badge
              if: github.event_name == 'push'
              uses: schneegans/dynamic-badges-action@v1.7.0
              with:
                  auth: ${{ secrets.GIST_TOKEN }}
                  gistID: bfba49c1003e973932c4de7dcc3e969a
                  filename: ${{ env.BADGE_NAME }}.txt
                  label: Coverage
                  message: ${{ env.TOTAL }}%
                  minColorRange: 30
                  maxColorRange: 80
                  valColorRange: ${{ env.TOTAL }}
                  forceUpdate: true

            - name: Check if README needs update
              if: github.event_name == 'push'
              run: |
                  if grep -q "${{ env.BADGE_NAME }}" README.md; then
                    echo "README_NEEDS_UPDATE=false" >> $GITHUB_ENV
                  else
                    echo "README_NEEDS_UPDATE=true" >> $GITHUB_ENV
                  fi
              shell: bash

            - name: Update README with badge URL
              if: github.event_name == 'push' && env.README_NEEDS_UPDATE == 'true'
              run: |
                  sed -i "s|raw/.*.txt|raw/${BADGE_NAME}.txt|" README.md

            - name: Commit updated README
              if: github.event_name == 'push' && env.README_NEEDS_UPDATE == 'true'
              run: |
                  git config --global user.name 'github-actions'
                  git config --global user.email 'github-actions@github.com'
                  git add README.md
                  git commit -m "Update coverage badge URL"
                  git push
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
