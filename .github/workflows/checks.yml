name: Checks

on: [push, pull_request]

permissions:
    contents: write
    checks: write
    pull-requests: write

jobs:
    Quality:
        runs-on: ubuntu-latest

        steps:
            - name: Print Directory Structure at the start
              run: ls -R $GITHUB_WORKSPACE

            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Print GITHUB_WORKSPACE after checkout
              run: |
                  echo "GITHUB_WORKSPACE after checkout: $GITHUB_WORKSPACE"

            - name: Print Directory Structure after checkout
              run: ls -R $GITHUB_WORKSPACE
            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Print Directory Structure before everything
              run: ls -R $GITHUB_WORKSPACE

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install black pylint isort mypy
                  python -m pip install types-PyYAML

            - name: Set PYTHONPATH
              run: echo "PYTHONPATH=${GITHUB_WORKSPACE}" >> $GITHUB_ENV

            - name: Run Black
              run: black --check $(git ls-files '*.py')

            - name: Run Pylint
              run: pylint $(git ls-files '*.py')

            - name: Run Isort
              run: isort --check-only $(git ls-files '*.py')

    Tests:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest pytest-cov

            - name: Set PYTHONPATH
              run: echo "PYTHONPATH=${GITHUB_WORKSPACE}" >> $GITHUB_ENV

            - name: Run tests and coverage
              run: |
                  pytest --cache-clear --cov=$(pwd) tests/ >> pytest-coverage.txt

            - name: List files in the workspace
              run: ls -R $GITHUB_ENV

            - name: pytest-coverage-commentator
              uses: coroo/pytest-coverage-commentator@v1.0.2
              with:
                  pytest-coverage: pytest-coverage.txt

            - name: Upload coverage data
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-data
                  path: .coverage
                  if-no-files-found: ignore

            - name: Verify coverage file before upload
              run: ls -l .coverage

    Coverage:
        name: Coverage
        needs: Tests
        runs-on: ubuntu-latest
        steps:
            - name: Check out the repo
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: 3.12

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade coverage[toml]

            - name: Download coverage data
              uses: actions/download-artifact@v4
              with:
                  name: coverage-data

            - name: Verify coverage file after tests
              run: ls -l .coverage

            - name: List files in the workspace
              run: ls -R $GITHUB_ENV

            - name: Combine coverage and fail it itâ€™s under 20 %
              run: |
                  coverage html --skip-covered --skip-empty
                  coverage_report=$(coverage report)
                  echo "$coverage_report" | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
                  total_coverage=$(echo "$coverage_report" | grep 'TOTAL' | awk '{print $4}')
                  echo "TOTAL_COVERAGE=${total_coverage}" >> $GITHUB_ENV

            - name: Upload HTML report if check failed
              uses: actions/upload-artifact@v4
              with:
                  name: html-report
                  path: htmlcov
              if: ${{ failure() }}

            - name: Create badge
              uses: schneegans/dynamic-badges-action@v1.7.0
              with:
                  auth: ${{ secrets.GIST_TOKEN }}
                  gistID: 94f9182f0a9c3c48c35477c65f056c4d
                  filename: gistfile1.txt
                  label: Coverage
                  message: ${{ env.TOTAL_COVERAGE }}%
                  minColorRange: 50
                  maxColorRange: 90
                  valColorRange: ${{ env.TOTAL_COVERAGE }}%
                  forceUpdate: true
